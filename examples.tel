-- File for small illustrative telomare programs and for testing

-- Hello World example.
-- main = \input -> ("Hello, World!", 0)

-- -- refinement fail
-- main : (\x -> if x then "fail" else 0) = 1

-- Ad hoc user defined types example:
-- inclreaseMyInt = \x : (right MyInt) -> undefined

MyInt = let wrapper = \h -> ( \i -> if not i
                                    then abort "MyInt cannot be 0"
                                    else  (h, i)
                            , \i -> if dEqual (left i) h
                                    then 0 -- TODO: Ask sam is this should be 1 instead
                                    else abort "Not a MyInt"
                            )
        in wrapper (# wrapper)
-- TODO: this should mean that aux is a MyInt but that isn't the behaviour
aux : (right MyInt) = \x -> if dEqual (right x) 8 then "Success" else "Failure"



main = \i -> (aux ((left MyInt) 8), 0)

-- Case example
-- main =
--   let toCase = (("a string", 99),(8,"pattern-match"))
--       caseTest =
--         case toCase of
--           (0,(8,2)) -> "Failure 1"
--           ("a string",(8,x)) -> concat [x, " failure 2"]
--           (("a string", 99),(8,x)) -> concat [x, " success with ints, strings and variables"]
--   in \input -> (caseTest, 0)
