(define Y
  (lambda (h)
    ((lambda (x) (h (lambda (a) ((x x) a))))
     (lambda (x) (h (lambda (a) ((x x) a)))))))

(define Zero (vector 'Zero))
(define (Pair a b) (vector 'Pair a b))
(define Env (vector 'Env))
(define (SetEnv x) (vector 'SetEnv x))
(define (Defer x) (vector 'Defer x))
(define (Gate a b) (vector 'Gate a b))
(define (PLeft x) (vector 'PLeft x))
(define (PRight x) (vector 'PRight x))
(define Trace (vector 'Trace))

(define (iEval f)
  (lambda (env x)
    (case (vector-ref x 0)
      ('Zero Zero)
      ('Defer (Defer (vector-ref x 1)))
      ('Pair (Pair (f env (vector-ref x 1)) (f env (vector-ref x 2))))
      ('Gate (Gate (vector-ref x 1) (vector-ref x 2)))
      ('Env env)
      ('SetEnv (let ((y (f env (vector-ref x 1))))
                 (case (vector-ref y 0)
                   ('Pair (case (vector-ref (vector-ref y 1) 0)
                            ('Defer (f (vector-ref y 2) (vector-ref (vector-ref y 1) 1)))
                            ('Gate (case (vector-ref (vector-ref y 2) 0)
                                     ('Zero (f env (vector-ref (vector-ref y 1) 1)))
                                     (else (f env (vector-ref (vector-ref y 1) 2)))
                            ; (haskell-syntax: z -> throwError $ SetEnvError z -- This should never actually occur, because it should be caught by typecheck)
                                     ))))
                   ; (haskell-syntax: bx -> throwError $ SetEnvError bx -- This should never actually occur, because it should be caught by typecheck)
                   )))
      ('PLeft (case (vector-ref (f env (vector-ref x 1)) 0)
                ('Pair (vector-ref (f env (vector-ref x 1)) 1))
                (else Zero)))
      ('PRight (case (vector-ref (f env (vector-ref x 1)) 0)
                ('Pair (vector-ref (f env (vector-ref x 1)) 2))
                (else Zero))))))

(define (magic n)
  ((Y iEval) Zero n))

(define hola (SetEnv (SetEnv (Pair (Defer (Pair (PLeft (PRight Env)) (Pair (PLeft Env) (PRight (PRight Env))))) (Pair Zero (Pair (Defer (Pair Zero Zero)) Zero))))))
